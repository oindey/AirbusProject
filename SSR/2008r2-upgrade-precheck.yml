---
- name: Check if host exists in tower inventory
  gather_facts: false
  hosts: localhost
  tasks:
    - block:
      - name: "Fail if Extra Variable {{ HOSTS }} does not exist in Ansible Tower's inventory"
        fail:
          msg: "{{ item }} does not exist in Ansible Tower's inventory."
        when: "item not in groups['all']" 
        with_items: "{{HOSTS}}"

      rescue:
      - name: Failure to get host in tower inventory
        debug:
          msg: 
            - "SYNTBOT_OUTPUT: FAILED: This server {{HOSTS}} does not exist in th inventory 2L22"
            - "SYNTBOT_DISPLAY: FAILED: This server {{HOSTS}} does not exist in th inventory 2L22"
        failed_when: True
#------------------------------------------------------------------------------------------------
#Check Port 5985
- name: Playbook Windows is Alive
  hosts: "{{ HOSTS }}"
  gather_facts: false
  vars:
    - HOSTS:
  tasks:
    - block:
      - name: Check if port 5985 is available
        wait_for:
          host: "{{ inventory_hostname }}"
          port: 5985
          connect_timeout: 2
          timeout: 2
        delegate_to: localhost

      - name: Gathering facts
        setup:

      rescue:
      - name: Log output for SYNTBOT
        debug:
          msg:
            - "SYNTBOT_OUTPUT: FAILED: Task {{ ansible_failed_task.name}} failed {{ ansible_failed_result.msg }}"
        failed_when: True
#------------------------------------------------------------------------------------------------
- name: Playbook check prerequisite upgrade 2008R2 to 2012R2 Version 1.8
  gather_facts: false
  hosts: "{{ HOSTS }}"
  vars:
    HOSTS:
    code_var:
      - "|20100| Precheck FAILED : You must use ADMINISTRATOR Account"
      - "|20200| Precheck FAILED : The CheckPrerequisites.xml file is missing"
      - "|20210| Precheck FAILED : The CheckPrerequisites.xml file can't be read"
      - "|20220| Precheck FAILED : Unsupported OS : The version of the OS on the target host is not Windows 2008R2"
      - "|20666| Precheck FAILED : Unknown error detected. Check the transcript log file locally on the host for more information"
      - "|21010| Precheck FAILED : Cluster service (ClusSvc) found. The target host is a member of an MSCS cluster"
      - "|21020| Precheck FAILED : At least one SQL instance installed on the target host is too old, an SQL upgrade is required before the Windows upgrade"
      - "|21030| Precheck FAILED : Not enough free space on the system (C:) disk. At least '30' GB of free space is required for upgrade"
      - "|21040| Precheck FAILED : Disk 'D:' does not exist or it is not a type '3' (Local hard disk)"
      - "|21050| Precheck FAILED : Not enough free space on the D: disk. At least '30' GB of free space is required for upgrade"
      - "|22000| Precheck FAILED : Free space on disk C:\ and/or disk D:\ does not meet the prerequisites for migration, at least 30 GB of free space is required for migration"
      - "|1010011010| Precheck FAILED : Another instance of this migration script is running"
      - "|-2146234327| Precheck FAILED : Unknown error script CheckPrerequisites.cmd Failed" 

  tasks:
    - block:

      - name: pick up the lines we are interested in.
        set_fact:
          important_lines: "{{ important_lines|default([]) +  [item] }}"
        when: item.split('|') 
        with_items:
          - "{{ code_var }}"

      - name: Copy script Precheck version 1.8 (28/09/2020)  on "{{ HOSTS }}"
        win_copy:
          src: "{{ item }}"
          dest: C:\Temp\pre-check\
        with_items:
          - files/CheckPrerequisites.cmd
          - files/CheckPrerequisites.ps1
          - files/CheckPrerequisites.xml
          - files/CheckIpconfig-NetLocal.cmd
          
      - name: Run CheckIpconfig-NetLocal.cmd on "{{ HOSTS }}"
        win_command: cmd /c "C:\temp\pre-check\CheckIpconfig-NetLocal.cmd"
        ignore_errors: yes

      - name: Run test-precheck-1.8/CheckPrerequisites.cmd on "{{ HOSTS }}"
        win_command: cmd /c "C:/Temp/pre-check/CheckPrerequisites.cmd"
        register: result
       
      - name: Log output for SYNTBOT when successful
        debug:
          msg:
           - "SYNTBOT_OUTPUT: SUCCESSFUL: CheckPrerequisites on {{ HOSTS }} for upgrade 2012r2"

      rescue:

       - name: set fact
         set_fact: 
           ERROR_CODE: "{{ result.rc }}"

       - name: find the line with the name we are looking for in 2nd column
         set_fact:
           target_line: "{{ item }}"
         when: item|trim is search(ERROR_CODE)
         with_items:
           - "{{ important_lines }}"

       - name: get the attributes from the target line
         set_fact:
           attribute: "{{ target_line.split('|')[2]|trim }}"

       - name: "TotalSize for disk C or D "
         set_fact:
           TOTAL: "{{ item }}"
         with_items:
           - "{{ result.stdout_lines }}"
         when: item|trim is search('TotalSize:') and (ERROR_CODE == '21030' or ERROR_CODE == '21050')

       - name: "Freespace for disk C or D"
         set_fact:
           FREE: "{{ item }}"
         with_items:
           - "{{ result.stdout_lines }}"
         when: item|trim is search('FreeSpace:') and (ERROR_CODE == '21030' or ERROR_CODE == '21050')

       - name: Log output for SYNTBOT when failed
         debug:
           msg:
            - "SYNTBOT_OUTPUT: FAILED: Task {{ ansible_failed_task.name}} failed : {{ ansible_failed_result.msg }}"
            - "SYNTBOT_DISPLAY: error_code:{{ ERROR_CODE }} , {{ attribute }}  ({{TOTAL}} / {{FREE}})"
         failed_when: True
         when: ERROR_CODE == '21030' or ERROR_CODE == '21050'

       - name: Log output for SYNTBOT when failed
         debug:
           msg:
            - "SYNTBOT_OUTPUT: FAILED: Task {{ ansible_failed_task.name}} failed : {{ ansible_failed_result.msg }}"
            - "SYNTBOT_DISPLAY: error_code:{{ ERROR_CODE }} , {{ attribute }}"
         failed_when: True
         when: ERROR_CODE != '21030' and ERROR_CODE != '21050'

      always:
       - name: Delete files on "{{ HOSTS }}"
         win_shell: rmdir /S /Q "c:/temp/pre-check"
         args:
           executable: cmd.exe
#---------------------------------------------------------------------------------------------------------
