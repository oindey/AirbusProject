---
- name: Playbook - Check if host exists in tower inventory
  gather_facts: false
  hosts: localhost

  tasks:
    - block:
      - name: "Fail if {{HOSTS}} does not exist in Ansible Tower's inventory 2L22"
        fail:
          msg: "{{ item }} does not exist in Ansible Tower's inventory."
        when: "item not in groups['all']"
        with_items: 
           - "{{HOSTS}}"

      rescue:
      - name: Failure to get host in tower inventory
        debug:
          msg: "SYNTBOT_OUTPUT: FAILED: This target host {{HOSTS}} does not exist in Tower Ansible Inventory 2L22"
        failed_when: True
#---------------------------------------------------------------------------------------------
- name: Playbook (POST_ABC_DB- Check and close / INST_DB-General status) - DB Healthcheck 
  gather_facts: true
  hosts: "{{HOSTS}}"
  become: true
  vars:
   HOSTS:
   ORACLE_SID:

  tasks:
    - block:

      - name: Check that ORACLE_SID is provided and must be string
        assert:
          that:
            - ORACLE_SID | mandatory
            - ORACLE_SID is defined
            - ORACLE_SID is string
          msg: "Parameter ORACLE_SID is not set correctly"

      - name: Check if /etc/oratab exist on {{HOSTS}}
        stat: 
          path: /etc/oratab
        register: oratab

      - name: Fail if /etc/oratab does not exist on {{HOSTS}}
        fail: 
          msg: "/etc/oratab does not exist"
        when: oratab.stat.exists == false

      - name: Get all instances ORACLE_SID from /etc/oratab on {{HOSTS}}
        shell: "cat /etc/oratab|grep -v ^#|grep ^[A-Z]|cut -d: -f1"
        register: ora_sid

      - name: Check if oracle_sid:{{ORACLE_SID}} exist on {{HOSTS}}
        assert:
          that: "ORACLE_SID in ora_sid.stdout"
          msg: "ORACLE_SID:{{ORACLE_SID}} does not exist on {{HOSTS}}"

      - name: Copy scripts files/DB-HealthCheck.sh to target host {{ HOSTS }}
        copy:
          src: "{{ item.src }}"
          dest: "{{ item.dest }}"
          mode: 0775
          owner: oracle
          group: dba
        with_items:
          - { src: 'files/DB-HealthCheck.sh',dest: '/tmp/DB-HealthCheck.sh'}

      - name: "Execute DB-HealthCheck ({{ORACLE_SID}}) on {{HOSTS}}"
        become_user: oracle
        become: true
        shell: ". $HOME/.profile && /tmp/DB-HealthCheck.sh {{ORACLE_SID}}"
        args:
            executable: /bin/bash

      - name: Log output for SYNTBOT OK
        debug:
          msg:
           - "SYNTBOT_OUTPUT: SUCCESSFUL: DB Healthcheck (INSTANCE: {{ORACLE_SID}}) on {{ansible_host}}"

      rescue:

      - name: Log output for SYNTBOT when failed
        debug:
          msg:
            - "SYNTBOT_OUTPUT: FAILED: DB Healthcheck (INSTANCE: {{ORACLE_SID}}) failed on {{ansible_host}}" 
            - "SYNTBOT_DISPLAY: Task {{ansible_failed_task.name}} ({{ansible_failed_result.msg}})"
        failed_when: True

      always:
      - name: Delete files on {{ HOSTS }}  (ignore on errors)
        file:
          path: "{{ item }}"
          state: absent
        with_items:
          - /tmp/DB-HealthCheck.sh_x
        ignore_errors: true
#-------------------------------------------------------------------------------------------
