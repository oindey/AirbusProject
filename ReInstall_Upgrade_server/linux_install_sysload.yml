---
- name: Check if host exists in tower inventory
  gather_facts: false
  hosts: localhost

  tasks:
    - block:
      - name: "Fail if Extra Variable {{ HOSTS }} does not exist in Ansible Tower's inventory"
        fail:
          msg: "{{ item }} does not exist in Ansible Tower's inventory."
        when: "item not in groups['all']"
        with_items: "{{HOSTS}}"

      rescue:
      - name: Failure to get host in tower inventory
        debug:
          msg: "SYNTBOT_OUTPUT: FAILED:  This target host {{HOSTS}} does not  exist in tower Ansible Inventory 2L22"
        failed_when: True

# install sysload client
- name: install sysload client
  hosts: "{{ HOSTS }}"
  gather_facts: false
  become: true
  vars:
    HOSTS: 
    ADM_HOST: de0-monas-p01.eu.airbus.corp
    SCRIPT: /local/opt/Automation/Sysload/bin/sldAddAgent.sh
    exit_code:
      0:
        desc: "ok"
      4:
        desc: "Missing argument"
      8:
        desc: "Sysload agent not registered"
      12:
        desc: "CI not found in CMDB or not in ABC perimeter"
      16:
        desc: "Sysload agent not fully registered"

  tasks:
    - block:
      - name: Install the latest version of aicb-sysload
        yum:
          name: aicb-sysload
          state: latest

      - name: start sysload service
        service:
          name: sysload
          enabled: true
          state: started

      - name: Add sysload client on sysload console
        shell: "{{ SCRIPT }} {{HOSTS}}"
        register: result
        failed_when: false
        delegate_to: "{{ ADM_HOST }}"
        vars:
          ansible_ssh_user: '{{ lookup("env", "ANSIBLE_NET_USERNAME") }}'
          ansible_ssh_pass: '{{ lookup("env", "ANSIBLE_NET_PASSWORD") }}'
          ansible_become: no

      - name: "assert RC=0 for {{ SCRIPT }}"
        assert:
          that: result.rc == 0
          msg: "{{exit_code[result.rc|int].desc}}"

      - name: Log output when successful
        debug:
          msg:
            - "SYNTBOT_OUTPUT: SUCCESSFUL install of sysload on {{ ansible_host }}"

      rescue:
      - name: Log output when failed
        debug:
          msg:
            - "SYNTBOT_OUTPUT: FAILED: Task {{ ansible_failed_task.name}} failed on {{ ansible_host }}: {{ ansible_failed_result.msg | default('') }}"
        failed_when: True
